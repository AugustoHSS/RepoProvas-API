// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  sessions sessions? @relation("sessionsTousers")

}

model sessions {
  id     Int   @id @default(autoincrement())
  userId Int   @unique
  users  users @relation("sessionsTousers", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

}

model categories {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  tests tests[]

}

model disciplines {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  termId              Int
  terms               terms                 @relation(fields: [termId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teachersDisciplines teachersDisciplines[]
}

model teachers {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  teachersDisciplines teachersDisciplines[]
}

model teachersDisciplines {
  id           Int         @id(map: "teachersdisciplines_pkey") @default(autoincrement())
  teacherId    Int
  disciplineId Int
  disciplines  disciplines @relation(fields: [disciplineId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "teachersdisciplines_disciplineId_fkey")
  teachers     teachers    @relation(fields: [teacherId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "teachersdisciplines_teacherId_fkey")
  tests        tests[]

}

model terms {
  id          Int           @id @default(autoincrement())
  number      Int           @unique
  disciplines disciplines[]

}

model tests {
  id                  Int                 @id @default(autoincrement())
  name                String
  pdfUrl              String
  categoryId          Int
  teacherDisciplineId Int
  categories          categories          @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teachersDisciplines teachersDisciplines @relation(fields: [teacherDisciplineId], references: [id], onDelete: NoAction, onUpdate: NoAction)

}
